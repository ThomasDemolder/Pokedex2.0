@page "/favorites"
@using Models
@using Util
@inject PokeClient client
@inject FavoriteService favoriteService

<h1>My favorites Pokemon</h1>
<div class="container">
    <div class="pokemon-row">
        @foreach (var pokemon in favoriteService.GetFavorites())
        {
            <div class="pokemon-card">
                <img src="@pokemon.sprites.front_default" alt="Pokemon Sprite" />
                <h4 class="pokemon-name">@(!string.IsNullOrWhiteSpace(pokemon.CustomName) ? pokemon.CustomName : pokemon.name)</h4>
                <div class="type-row">
                    @foreach (var type in pokemon.types)
                    {
                        <span class="type-badge" style="background-color: @PokeColor.GetTypeColor(@type.type.name)">@type.type.name</span>
                    }
                </div>
                <input type="text" @bind="@pokemon.CustomName" placeholder="New name" />
                <button class="buton-buton" @onclick="() => UpdatePokemonName(pokemon)">Change name</button>
                <button class="buton-buton" @onclick="() => RemoveFromFavorites(pokemon)">Remove favorites</button>
            </div>
        }
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await favoriteService.LoadFavoritesAsync();
    }

    private async Task RemoveFromFavorites(Pokemon pokemon)
    {
        await favoriteService.RemoveFromFavorites(pokemon);
        StateHasChanged(); // Pour rafraîchir l'UI avec le nouveau nom
    }

    private async Task UpdatePokemonName(Pokemon pokemon)
    {
        await favoriteService.UpdatePokemonName(pokemon.id, pokemon.CustomName);
        StateHasChanged(); // Pour rafraîchir l'UI avec le nouveau nom
    }
}